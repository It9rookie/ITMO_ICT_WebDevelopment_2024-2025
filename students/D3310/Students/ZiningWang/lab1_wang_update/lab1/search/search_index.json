{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041b\u0430\u0431 \u21161 - \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438","text":"<p>\u0413\u0440\u0443\u043f\u043f\u0430:D3310 \u0421\u0442\u0443\u0434\u0435\u043d\u0442: \u0412\u0430\u043d \u0426\u0437\u044b\u043d\u0438\u043d</p> <ul> <li>\u041b\u0430\u0431 \u21161 - \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438<ul> <li>\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435</li> <li>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438<ul> <li>\u0421\u0435\u0440\u0432\u0435\u0440</li> <li>\u041a\u043b\u0438\u0435\u043d\u0442</li> <li>\u041c\u043d\u043e\u0433\u043e\u0437\u0430\u0434\u0430\u0447\u043d\u043e\u0441\u0442\u044c</li> </ul> </li> <li>\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f<ul> <li>task1</li> <li>task1_screenshot</li> <li>task2</li> <li>task2_screenshot</li> <li>task3</li> <li>task3_screenshot</li> <li>task4</li> <li>task4_screenshot</li> <li>task5</li> <li>task5_screenshot_\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430</li> <li>task5_screenshot_\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430</li> </ul> </li> <li>\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435</li> </ul> </li> </ul>"},{"location":"#_1","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435","text":"<p>\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043b\u0438 \u043e\u0441\u043d\u043e\u0432\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430. \u0421\u043e\u043a\u0435\u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430\u043c\u0438, \u0447\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0435\u0432\u043e\u0433\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0432 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445.</p>"},{"location":"#_2","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438","text":""},{"location":"#_3","title":"\u0421\u0435\u0440\u0432\u0435\u0440","text":"<p>\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f <code>socket</code> \u0438 <code>threading</code> \u0434\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u0437\u0430\u0434\u0430\u0447\u043d\u043e\u0441\u0442\u0438. \u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u0440\u0442 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043e\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043f\u0435\u0440\u0435\u0441\u044b\u043b\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c.</p>"},{"location":"#_4","title":"\u041a\u043b\u0438\u0435\u043d\u0442","text":"<p>\u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u0414\u043b\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435, \u0430 \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440.</p>"},{"location":"#_5","title":"\u041c\u043d\u043e\u0433\u043e\u0437\u0430\u0434\u0430\u0447\u043d\u043e\u0441\u0442\u044c","text":"<p>\u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u043e\u0434\u0443\u043b\u044c <code>threading</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u043c\u043d\u043e\u0433\u043e\u0437\u0430\u0434\u0430\u0447\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435. \u041a\u0430\u0436\u0434\u044b\u0439 \u043d\u043e\u0432\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435.</p>"},{"location":"#_6","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f","text":""},{"location":"#task1","title":"task1","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p> <p>task1_server.py</p> <pre><code>from socket import *\n\n\nserver_socket = socket(AF_INET, SOCK_DGRAM)\nserver_address = ('localhost', 9090)\n\nserver_socket.bind(server_address)\n\nprint(\"UDP is running\")\n\nwhile True:\n    print(\"waiting for data...\")\n    data, client_address = server_socket.recvfrom(1024)\n    if not data:\n        break\n    print(f\"Message from client '{data.decode()}' was received from client.\", flush=True)\n\n    response = \"Hello, Client!\"\n    server_socket.sendto(response.encode(), client_address)\n    print(f\"Message '{response}' was sent to client.\")\n\nserver_socket.close()\n</code></pre> <p>task1_client.py</p> <pre><code>from socket import *\n\n\nclient_socket = socket(AF_INET, SOCK_DGRAM)\n\ndata_for_server = \"Hello, Server!\"\n\nclient_socket.sendto(data_for_server.encode(), ('localhost', 9090))\nprint(f\"Message: '{data_for_server}' was sent to server.\")\n\ndata_from_server, addr = client_socket.recvfrom(1024)\nprint(f\"Message: '{data_from_server.decode()}' was received from server.\")\n</code></pre>"},{"location":"#task1_screenshot","title":"task1_screenshot","text":""},{"location":"#task2","title":"task2","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</p> <p>task2_server.py</p> <pre><code>from socket import *\nimport time\n\n\ndef parallelogram_area(a, h):\n    return a * h\n\nserver_socket = socket(AF_INET, SOCK_STREAM)\nserver_socket.bind(('localhost', 9090))\nserver_socket.listen(1)\n\nprint(\"Waiting for client...\")\n\nwhile True:\n    connection, addr = server_socket.accept()\n    try:\n        time.sleep(3)\n        print(f\"client {addr} is now in session\")\n        data = connection.recv(1024).decode()\n        if data:\n            base, height = map(float, data.split())\n            print(f\"Parameters {base}, {height} are received\")\n            area = parallelogram_area(base, height)\n\n            connection.sendall(str(area).encode())\n            print(f\"result {area} sent to client\")\n    finally:\n        connection.close()\n</code></pre> <p>task2_client.py</p> <pre><code>from socket import *\n\n\nclient_socket = socket(AF_INET, SOCK_STREAM)\nclient_socket.connect(('localhost', 9090))\n\ntry:\n    base = float(input(\"Please enter the length of the base of the parallelogram: \"))\n    height = float(input(\"Please enter the height of the parallelogram h: \"))\n    print(f\"Parameters for the parallelogram are base={base}, height={height}.\")\n    message = f\"{base} {height}\"\n    client_socket.sendall(message.encode())\n\n    data = client_socket.recv(1024).decode()\n    print(f\"Area of the parallelogram is {data}\")\n\nfinally:\n    client_socket.close()\n</code></pre>"},{"location":"#task2_screenshot","title":"task2_screenshot","text":""},{"location":"#task3","title":"task3","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.</p> <p>task3_server.py</p> <pre><code>from socket import *\nimport os\n\n# \u200b\u83b7\u53d6\u200b\u5f53\u524d\u200b\u6587\u4ef6\u200b\u6240\u5728\u200b\u7684\u200b\u76ee\u5f55\u200b\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\nhtml_file_path = os.path.join(current_dir, 'index.html')\n\n# \u200b\u786e\u4fdd\u200b HTML \u200b\u6587\u4ef6\u200b\u5b58\u5728\u200b\nif not os.path.exists(html_file_path):\n    raise FileNotFoundError(f\"HTML file not found at: {html_file_path}\")\n\n# \u200b\u521b\u5efa\u200b\u670d\u52a1\u5668\u200b\u5957\u200b\u63a5\u5b57\u200b\nserver_socket = socket(AF_INET, SOCK_STREAM)\nserver_socket.bind(('localhost', 9090))\nserver_socket.listen(1)\n\nprint(\"Server is running...\")\nprint(\"http://localhost:9090\")\n\nwhile True:\n    connection, client_address = server_socket.accept()\n    try:\n        print(f\"Client: {client_address} is now in session.\")\n\n        # \u200b\u63a5\u6536\u200b\u5ba2\u6237\u7aef\u200b\u8bf7\u6c42\u200b\n        request = connection.recv(1024).decode()\n        print(f\"Client request: \\n{request}\")\n\n        # \u200b\u8bfb\u53d6\u200b HTML \u200b\u6587\u4ef6\u200b\u5185\u5bb9\u200b\n        with open(html_file_path, 'r', encoding='utf-8') as file:\n            html_content = file.read()\n\n        # \u200b\u521b\u5efa\u200b HTTP \u200b\u54cd\u5e94\u200b\n        response = f\"\"\"HTTP/1.1 200 OK\nContent-Type: text/html\nContent-Length: {len(html_content)}\n\n{html_content}\"\"\"\n\n        # \u200b\u53d1\u9001\u200b\u54cd\u5e94\u200b\n        connection.sendall(response.encode())\n        print(\"Response is sent to a client.\")\n    finally:\n        connection.close()\n        print(f\"Connection with client {client_address} is closed.\")\n</code></pre>"},{"location":"#task3_screenshot","title":"task3_screenshot","text":""},{"location":"#task4","title":"task4","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.</p> <p>task4_server.py</p> <pre><code>from socket import *\nimport threading\n\n\nclients = []\nusernames = []\n\ndef handle_client(client_socket, address):\n    print(f\"{address} entered the session.\")\n    username = client_socket.recv(1024).decode()\n    usernames.append(username)\n    clients.append(client_socket)\n\n    broadcast(f\"{username} entered the session\".encode(), client_socket)\n\n    while True:\n        try:\n            message = client_socket.recv(1024)\n            if message:\n                broadcast(f\"{username}: {message.decode()}\".encode(), client_socket)\n            else:\n                remove_client(client_socket)\n                break\n        except:\n            continue\n\ndef broadcast(message, client_socket):\n    for client in clients:\n        if client != client_socket:\n            try:\n                client.send(message)\n            except:\n                remove_client(client)\n\ndef remove_client(client_socket):\n    if client_socket in clients:\n        index = clients.index(client_socket)\n        clients.remove(client_socket)\n        username = usernames[index]\n        usernames.remove(username)\n        broadcast(f\"{username} left.\".encode(), client_socket)\n\nserver_socket = socket(AF_INET, SOCK_STREAM)\nserver_socket.bind(('localhost', 9090))\nserver_socket.listen(5)\nprint(\"Server is running...\")\n\nwhile True:\n    client_socket, address = server_socket.accept()\n    threading.Thread(target=handle_client, args=(client_socket, address)).start()\n</code></pre> <p>task4_client.py</p> <pre><code>from socket import *\nimport threading\n\n\ndef receive_messages(client_socket):\n    while True:\n        try:\n            message = client_socket.recv(1024).decode()\n            if message:\n                print(message)\n            else:\n                break\n        except:\n            print(\"unable to send message\")\n            client_socket.close()\n            break\n\nclient_socket = socket(AF_INET, SOCK_STREAM)\nclient_socket.connect(('localhost', 9090))\n\nthreading.Thread(target=receive_messages, args=(client_socket,)).start()\n\nusername = input(\"Please enter your name: \")\nclient_socket.send(username.encode())\n\nwhile True:\n    message = input()\n    if message.lower() == 'exit':\n        break\n    client_socket.send(message.encode())\n\nclient_socket.close()\n</code></pre>"},{"location":"#task4_screenshot","title":"task4_screenshot","text":""},{"location":"#task5","title":"task5","text":"<p>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python.</p> <p>task5_server.py</p> <pre><code>import socket\nimport threading\n\n\nHOST = 'localhost'\nPORT = 9090\ngrouped_grades = {}\n\n\ndef handle_client(connection, address):\n    request = connection.recv(1024).decode()\n    parts = request.split(' ')\n    if len(parts) &gt;= 3:\n        method, path, protocol = parts[0:3]\n        print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d {method} \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0442 {address}\")\n        if method == 'GET':\n            send_response(connection, '200 OK', 'Content-Type: text/html', provide_with_html())\n        elif method == 'POST':\n            content_length = int(request.split('Content-Length: ')[1].split('\\r\\n')[0])\n            body = request.split('\\r\\n\\r\\n', 1)[1]\n            while len(body.encode('utf-8')) &lt; content_length:\n                body += connection.recv(1024).decode()\n            params = parse_post_data(body)\n            discipline, grade = params.get('discipline', ''), params.get('grade', '')\n            grouped_grades[discipline] = grouped_grades.get(discipline, []) + [grade]\n            send_response(connection, '200 OK', 'Content-Type: text/plain', '\u041f\u0440\u0438\u043d\u044f\u0442\u043e!')\n        else:\n            send_response(connection, '405 Method is Not Allowed', 'Content-Type: text/plain',\n                          '\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u0442\u0430\u043a\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 \u043d\u0435\u0442 \u0432 \u043b\u0438\u0441\u0442\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u044b\u0445, \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0435\u0449\u0435 \u0440\u0430\u0437(((((')\n    else:\n        send_response(connection, '400 Bad Request', 'Content-Type: text/plain', '\u041e\u0448\u0438\u0431\u043a\u0430')\n    connection.close()\n\n\ndef send_response(connection, status, content_type, body):\n    response = f\"\"\"HTTP/1.1 {status}\n{content_type}\nContent-Length: {len(body)}\n\n{body}\"\"\"\n    connection.sendall(response.encode())\n\n\ndef parse_post_data(data):\n    return {key: value.replace('+', ' ') for key, value in [pair.split('=') for pair in data.split('&amp;')]}\n\n\ndef provide_with_html():\n    rows = ''.join([f\"&lt;tr&gt;&lt;td&gt;{discipline}&lt;/td&gt;&lt;td&gt;{','.join(grades)}&lt;/td&gt;&lt;/tr&gt;\" for discipline, grades in grouped_grades.items()])\n    return f\"\"\"&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Grades&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Grades&lt;/h1&gt;\n    &lt;table border=\"1\"&gt;\n        &lt;tr&gt;&lt;th&gt;Discipline&lt;/th&gt;&lt;th&gt;Grade&lt;/th&gt;&lt;/tr&gt;\n        {rows}\n    &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\"\"\"\n\n\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n    s.bind((HOST, PORT))\n    s.listen()\n    print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u043d\u0430 \u043f\u043e\u0440\u0442\u0435\", PORT)\n    while True:\n        connection, address = s.accept()\n        thread = threading.Thread(target=handle_client, args=(connection, address))\n        thread.start()\n</code></pre> <p>\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0434\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430</p> <pre><code>import socket\nimport threading\n\n# \u200b\u5b9a\u4e49\u200b\u5168\u5c40\u53d8\u91cf\u200b\nclients = []\n\n# \u200b\u5904\u7406\u200b\u5ba2\u6237\u7aef\u200b\u8fde\u63a5\u200b\u7684\u200b\u51fd\u6570\u200b\ndef handle_client(client_socket, client_address):\n    print(f\"[INFO] \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d: {client_address}\")\n    clients.append((client_socket, client_address))\n\n    while True:\n        try:\n            message = client_socket.recv(1024).decode(\"utf-8\")\n            if message:\n                print(f\"[C\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 {client_address}]: {message}\")\n                broadcast(message, client_address)\n        except:\n            print(f\"[\u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430]: {client_address}\")\n            clients.remove((client_socket, client_address))\n            client_socket.close()\n            break\n\n# \u200b\u5e7f\u64ad\u200b\u6d88\u606f\u200b\u7684\u200b\u51fd\u6570\u200b\ndef broadcast(message, sender_address):\n    for client_socket, client_address in clients:\n        if client_address != sender_address:  # \u200b\u4e0d\u200b\u53d1\u9001\u7ed9\u200b\u6d88\u606f\u200b\u7684\u200b\u53d1\u9001\u8005\u200b\n            try:\n                client_socket.send(f\"\\n[{sender_address[1]}]: {message}\".encode(\"utf-8\"))\n            except:\n                client_socket.close()\n                clients.remove((client_socket, client_address))\n\n# \u200b\u4e3b\u200b\u51fd\u6570\u200b\ndef main():\n    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server.bind((\"0.0.0.0\", 12345))  # \u200b\u76d1\u542c\u200b\u7aef\u53e3\u200b\n    server.listen(5)\n    print(\"[SERVER STARTED]\")\n\n    while True:\n        client_socket, client_address = server.accept()\n        threading.Thread(target=handle_client, args=(client_socket, client_address)).start()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430</p> <pre><code>import socket\nimport threading\n\n# \u200b\u5904\u7406\u200b\u63a5\u6536\u200b\u6d88\u606f\u200b\u7684\u200b\u51fd\u6570\u200b\ndef receive_messages(client_socket):\n    while True:\n        try:\n            message = client_socket.recv(1024).decode(\"utf-8\")\n            if message:\n                print(message)\n        except:\n            print(\"[\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u0440\u044b\u0442\u043e]\")\n            client_socket.close()\n            break\n\n# \u200b\u4e3b\u200b\u51fd\u6570\u200b\ndef main():\n    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client.connect((\"127.0.0.1\", 12345))  # \u200b\u8fde\u63a5\u200b\u5230\u200b\u670d\u52a1\u5668\u200b\n\n    threading.Thread(target=receive_messages, args=(client,)).start()\n\n    while True:\n        message = input(\"\u0412\u044b: \")\n        if message.lower() == \"exit\":\n            client.close()\n            break\n        client.send(message.encode(\"utf-8\"))\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"#task5_screenshot_","title":"task5_screenshot_\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430","text":""},{"location":"#task5_screenshot__1","title":"task5_screenshot_\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430","text":""},{"location":"#_7","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<p>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u043f\u043e\u043c\u043e\u0433\u043b\u0430 \u043f\u043e\u043d\u044f\u0442\u044c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438 \u0438 \u043c\u043d\u043e\u0433\u043e\u0437\u0430\u0434\u0430\u0447\u043d\u043e\u0441\u0442\u044c\u044e \u0432 Python. \u042d\u0442\u0438 \u0437\u043d\u0430\u043d\u0438\u044f \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043e\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439.</p>"}]}